!function(e){var t={};function o(r){if(t[r])return t[r].exports;var n=t[r]={i:r,l:!1,exports:{}};return e[r].call(n.exports,n,n.exports,o),n.l=!0,n.exports}o.m=e,o.c=t,o.d=function(e,t,r){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(o.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)o.d(r,n,function(t){return e[t]}.bind(null,n));return r},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=0)}([function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=o(1),n=o(2),i=new n.default("Bert Bertocimus"),a=new n.default("Fredacious Fredicus");new r.default(i,a)},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){this.startingPlayer=0,this.fighter1=e,this.fighter2=t,this.fighters=[this.fighter1,this.fighter2],console.log("%c welcome "+e.tamName+" and "+t.tamName+" to MORTAL KOMBAT!!!!","font-size: 2em; color:red; font-weight:bold; background:black;"),this.initMatch()}return e.prototype.initMatch=function(){console.log("Fight!"),this.startingPlayer=this.determineFirstFighter(),this.meleRound(this.fighters,this.startingPlayer)},e.prototype.determineFirstFighter=function(){return Math.random()>.5?0:1},e.prototype.meleRound=function(e,t){var o=this.determineCombatRoles(t),r=e[o.attacker],n=e[o.defender],i=r.attack(),a=n.defend();if(!0===this.determineStrikeOutcome(i,a)?(console.log("%c"+r.getFighterName()+" hits "+n.getFighterName()+" with "+i.foodName+" for "+i.damage+"!","font-size: 2em; color: red; background: black;"),n.takeDamage(i.damage)):console.log("%c"+r.getFighterName()+" misses "+n.getFighterName()+" with "+i.foodName+"!","font-size: 2em; color:green;background:yellow;"),console.log(r.getFighterName()+": "+r.getHP()+" "+n.getFighterName()+": "+n.getHP()),n.getHP()<=0)console.log("%c"+r.getFighterName()+" has won!","font-size: 3em; color:goldenrod; background:blue; border: 2px solid black;");else{var s=void 0;s=0==t?1:0,this.meleRound(e,s)}},e.prototype.determineCombatRoles=function(e){var t=0;return 0==e&&(t=1),{attacker:e,defender:t}},e.prototype.determineStrikeOutcome=function(e,t){var o=.45;return e.foodCat==t.weakAgainst&&(o*=2),e.foodCat==t.strongAgainst&&(o/=2),Math.random()>=o},e}();t.default=r},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e){this.defenseCharacteristics={strongAgainst:"fruit",weakAgainst:"meat"},this.tamName=e,this.hp=60,console.log("my name is "+this.tamName),this.foods=[{foodName:"bananas",foodCat:"fruit",damage:4},{foodName:"beef stroganoff",foodCat:"meat",damage:12},{foodName:"rice",foodCat:"grain",damage:1}]}return e.prototype.getFighterName=function(){return this.tamName},e.prototype.defend=function(){return this.defenseCharacteristics},e.prototype.attack=function(){var e=Math.floor(Math.random()*this.foods.length);return this.foods[e]},e.prototype.takeDamage=function(e){this.hp-=e},e.prototype.getHP=function(){return this.hp},e}();t.default=r}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,